# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BooleanNullableFilter {
  equals: Boolean
  not: Boolean
}

type Category {
  createdAt: DateTime!
  description: String
  id: String!
  imageUrl: String
  listings(orderBy: [ListingOrderByInput!], skip: Float, take: Float, where: ListingWhereInput): [Listing!]!
  name: String!
  updatedAt: DateTime!
}

input CategoryCreateInput {
  description: String
  imageUrl: String
  listings: ListingCreateNestedManyWithoutCategoriesInput
  name: String!
}

input CategoryOrderByInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  imageUrl: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CategoryUpdateInput {
  description: String
  imageUrl: String
  listings: ListingUpdateManyWithoutCategoriesInput
  name: String
}

input CategoryWhereInput {
  description: StringNullableFilter
  id: StringFilter
  imageUrl: StringNullableFilter
  listings: ListingListRelationFilter
  name: StringFilter
}

input CategoryWhereUniqueInput {
  id: String!
}

type Comment {
  author: User
  commentOn(orderBy: [CommentOrderByInput!], skip: Float, take: Float, where: CommentWhereInput): [Comment!]!
  commented: Comment
  createdAt: DateTime!
  id: String!
  listing: Listing
  text: String!
  updatedAt: DateTime!
}

input CommentCreateInput {
  author: UserWhereUniqueInput!
  commentOn: CommentCreateNestedManyWithoutCommentsInput
  commented: CommentWhereUniqueInput
  listing: ListingWhereUniqueInput!
  text: String!
}

input CommentCreateNestedManyWithoutCommentsInput {
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateNestedManyWithoutListingsInput {
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateNestedManyWithoutUsersInput {
  connect: [CommentWhereUniqueInput!]
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentOrderByInput {
  Author: SortOrder
  Comments: SortOrder
  commentedId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  text: SortOrder
  updatedAt: SortOrder
}

input CommentUpdateInput {
  author: UserWhereUniqueInput
  commentOn: CommentUpdateManyWithoutCommentsInput
  commented: CommentWhereUniqueInput
  listing: ListingWhereUniqueInput
  text: String
}

input CommentUpdateManyWithoutCommentsInput {
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
}

input CommentUpdateManyWithoutListingsInput {
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
}

input CommentUpdateManyWithoutUsersInput {
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
}

input CommentWhereInput {
  author: UserWhereUniqueInput
  commentOn: CommentListRelationFilter
  commented: CommentWhereUniqueInput
  id: StringFilter
  listing: ListingWhereUniqueInput
  text: StringFilter
}

input CommentWhereUniqueInput {
  id: String!
}

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum EnumListingCondition {
  Excellent
  Good
  New
  Okay
}

type Image {
  alt: String
  createdAt: DateTime!
  id: String!
  listing: Listing
  order: Float!
  updatedAt: DateTime!
  url: String!
}

input ImageCreateInput {
  alt: String
  listing: ListingWhereUniqueInput!
  order: Float!
  url: String!
}

input ImageCreateNestedManyWithoutListingsInput {
  connect: [ImageWhereUniqueInput!]
}

input ImageListRelationFilter {
  every: ImageWhereInput
  none: ImageWhereInput
  some: ImageWhereInput
}

input ImageOrderByInput {
  Listing: SortOrder
  alt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  order: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

input ImageUpdateInput {
  alt: String
  listing: ListingWhereUniqueInput
  order: Float
  url: String
}

input ImageUpdateManyWithoutListingsInput {
  connect: [ImageWhereUniqueInput!]
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
}

input ImageWhereInput {
  alt: StringNullableFilter
  id: StringFilter
  listing: ListingWhereUniqueInput
  order: IntFilter
  url: StringFilter
}

input ImageWhereUniqueInput {
  id: String!
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Listing {
  category: Category
  comments(orderBy: [CommentOrderByInput!], skip: Float, take: Float, where: CommentWhereInput): [Comment!]!
  condition: EnumListingCondition
  createdAt: DateTime!
  description: String
  id: String!
  images(orderBy: [ImageOrderByInput!], skip: Float, take: Float, where: ImageWhereInput): [Image!]!
  location: String
  owner: User
  published: Boolean
  title: String!
  updatedAt: DateTime!
}

input ListingCreateInput {
  category: CategoryWhereUniqueInput!
  comments: CommentCreateNestedManyWithoutListingsInput
  condition: EnumListingCondition!
  description: String
  images: ImageCreateNestedManyWithoutListingsInput
  location: String
  owner: UserWhereUniqueInput!
  published: Boolean
  title: String!
}

input ListingCreateNestedManyWithoutCategoriesInput {
  connect: [ListingWhereUniqueInput!]
}

input ListingCreateNestedManyWithoutUsersInput {
  connect: [ListingWhereUniqueInput!]
}

input ListingListRelationFilter {
  every: ListingWhereInput
  none: ListingWhereInput
  some: ListingWhereInput
}

input ListingOrderByInput {
  OwnerId: SortOrder
  categoryId: SortOrder
  condition: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  location: SortOrder
  published: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input ListingUpdateInput {
  category: CategoryWhereUniqueInput
  comments: CommentUpdateManyWithoutListingsInput
  condition: EnumListingCondition
  description: String
  images: ImageUpdateManyWithoutListingsInput
  location: String
  owner: UserWhereUniqueInput
  published: Boolean
  title: String
}

input ListingUpdateManyWithoutCategoriesInput {
  connect: [ListingWhereUniqueInput!]
  disconnect: [ListingWhereUniqueInput!]
  set: [ListingWhereUniqueInput!]
}

input ListingUpdateManyWithoutUsersInput {
  connect: [ListingWhereUniqueInput!]
  disconnect: [ListingWhereUniqueInput!]
  set: [ListingWhereUniqueInput!]
}

input ListingWhereInput {
  category: CategoryWhereUniqueInput
  comments: CommentListRelationFilter
  condition: EnumListingCondition
  description: StringNullableFilter
  id: StringFilter
  images: ImageListRelationFilter
  location: StringNullableFilter
  owner: UserWhereUniqueInput
  published: BooleanNullableFilter
  title: StringFilter
}

input ListingWhereUniqueInput {
  id: String!
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createCategory(data: CategoryCreateInput!): Category!
  createComment(data: CommentCreateInput!): Comment!
  createImage(data: ImageCreateInput!): Image!
  createListing(data: ListingCreateInput!): Listing!
  createUser(data: UserCreateInput!): User!
  deleteCategory(where: CategoryWhereUniqueInput!): Category!
  deleteComment(where: CommentWhereUniqueInput!): Comment!
  deleteImage(where: ImageWhereUniqueInput!): Image!
  deleteListing(where: ListingWhereUniqueInput!): Listing!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment!
  updateImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image!
  updateListing(data: ListingUpdateInput!, where: ListingWhereUniqueInput!): Listing!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Query {
  _categoriesMeta(where: CategoryWhereInput): MetaQueryPayload!
  _commentsMeta(where: CommentWhereInput): MetaQueryPayload!
  _imagesMeta(where: ImageWhereInput): MetaQueryPayload!
  _listingsMeta(where: ListingWhereInput): MetaQueryPayload!
  _usersMeta(where: UserWhereInput): MetaQueryPayload!
  categories(orderBy: [CategoryOrderByInput!], skip: Float, take: Float, where: CategoryWhereInput): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  comment(where: CommentWhereUniqueInput!): Comment
  comments(orderBy: [CommentOrderByInput!], skip: Float, take: Float, where: CommentWhereInput): [Comment!]!
  image(where: ImageWhereUniqueInput!): Image
  images(orderBy: [ImageOrderByInput!], skip: Float, take: Float, where: ImageWhereInput): [Image!]!
  listing(where: ListingWhereUniqueInput!): Listing
  listings(orderBy: [ListingOrderByInput!], skip: Float, take: Float, where: ListingWhereInput): [Listing!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  bio: String
  comments(orderBy: [CommentOrderByInput!], skip: Float, take: Float, where: CommentWhereInput): [Comment!]!
  createdAt: DateTime!
  firstName: String
  id: String!
  imageUrl: String
  listings(orderBy: [ListingOrderByInput!], skip: Float, take: Float, where: ListingWhereInput): [Listing!]!
  roles: JSON!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  bio: String
  comments: CommentCreateNestedManyWithoutUsersInput
  firstName: String
  imageUrl: String
  listings: ListingCreateNestedManyWithoutUsersInput
  password: String!
  roles: JSON!
  username: String!
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  bio: SortOrder
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  imageUrl: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  bio: String
  comments: CommentUpdateManyWithoutUsersInput
  firstName: String
  imageUrl: String
  listings: ListingUpdateManyWithoutUsersInput
  password: String
  roles: JSON
  username: String
}

input UserWhereInput {
  bio: StringNullableFilter
  comments: CommentListRelationFilter
  firstName: StringNullableFilter
  id: StringFilter
  imageUrl: StringNullableFilter
  listings: ListingListRelationFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
