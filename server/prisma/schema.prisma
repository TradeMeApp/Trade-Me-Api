datasource postgres {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  bio       String?
  comments  Comment[]
  createdAt DateTime  @default(now())
  firstName String?
  id        String    @id @default(cuid())
  imageUrl  String?
  lastName  String?
  listings  Listing[]
  password  String
  roles     Json
  updatedAt DateTime  @updatedAt
  username  String    @unique
}

model Category {
  createdAt   DateTime  @default(now())
  description String?
  id          String    @id @default(cuid())
  imageUrl    String?
  listings    Listing[]
  name        String
  updatedAt   DateTime  @updatedAt
}

model Listing {
  category    Category             @relation(fields: [categoryId], references: [id])
  categoryId  String
  comments    Comment[]
  condition   EnumListingCondition @default([Good])
  createdAt   DateTime             @default(now())
  description String?
  id          String               @id @default(cuid())
  images      Image[]
  location    String?
  owner       User                 @relation(fields: [OwnerId], references: [id])
  OwnerId     String
  published   Boolean?             @default(false)
  title       String
  updatedAt   DateTime             @updatedAt
}

model Image {
  alt       String?
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  listing   Listing  @relation(fields: [Listing], references: [id])
  Listing   String
  order     Int
  updatedAt DateTime @updatedAt
  url       String
}

model Comment {
  author      User      @relation(fields: [Author], references: [id])
  Author      String
  commented   Comment?  @relation(name: "commentOn", fields: [commentedId], references: [id])
  commentedId String?
  commentOn   Comment[] @relation(name: "commentOn")
  createdAt   DateTime  @default(now())
  id          String    @id @default(cuid())
  listing     Listing   @relation(fields: [Comments], references: [id])
  Comments    String
  text        String
  updatedAt   DateTime  @updatedAt
}

enum EnumListingCondition {
  New
  Excellent
  Good
  Okay
}
