/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { Public } from "../../decorators/public.decorator";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateImageArgs } from "./CreateImageArgs";
import { UpdateImageArgs } from "./UpdateImageArgs";
import { DeleteImageArgs } from "./DeleteImageArgs";
import { ImageCountArgs } from "./ImageCountArgs";
import { ImageFindManyArgs } from "./ImageFindManyArgs";
import { ImageFindUniqueArgs } from "./ImageFindUniqueArgs";
import { Image } from "./Image";
import { Listing } from "../../listing/base/Listing";
import { ImageService } from "../image.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Image)
export class ImageResolverBase {
  constructor(
    protected readonly service: ImageService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @Public()
  @graphql.Query(() => MetaQueryPayload)
  async _imagesMeta(
    @graphql.Args() args: ImageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @Public()
  @graphql.Query(() => [Image])
  async images(@graphql.Args() args: ImageFindManyArgs): Promise<Image[]> {
    return this.service.findMany(args);
  }

  @Public()
  @graphql.Query(() => Image, { nullable: true })
  async image(
    @graphql.Args() args: ImageFindUniqueArgs
  ): Promise<Image | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Image)
  @nestAccessControl.UseRoles({
    resource: "Image",
    action: "create",
    possession: "any",
  })
  async createImage(@graphql.Args() args: CreateImageArgs): Promise<Image> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        listing: {
          connect: args.data.listing,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Image)
  @nestAccessControl.UseRoles({
    resource: "Image",
    action: "update",
    possession: "any",
  })
  async updateImage(
    @graphql.Args() args: UpdateImageArgs
  ): Promise<Image | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          listing: {
            connect: args.data.listing,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Image)
  @nestAccessControl.UseRoles({
    resource: "Image",
    action: "delete",
    possession: "any",
  })
  async deleteImage(
    @graphql.Args() args: DeleteImageArgs
  ): Promise<Image | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.ResolveField(() => Listing, {
    nullable: true,
    name: "listing",
  })
  async resolveFieldListing(
    @graphql.Parent() parent: Image
  ): Promise<Listing | null> {
    const result = await this.service.getListing(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
